#!/bin/bash
# 現在の天気のスクリプト

# 場所のURL（日本語表記にしたい場合は/en/を/ja/に書き換える）
WEATHER_URL=${WEATHER_URL:='MY_WEATHER_URL'}

# 見出しと天気とMINUTECASTの色（30 黒、31 赤、32 緑、33 黄、34 青、35 マゼンタ、36 シアン、37 白、0 デフォルト、1 強調、2 弱強調、4 下線、5 点滅、7 反転）
COLOR_CP='1'  # 見出し
COLOR_WE='0'  # 天気
COLOR_MC='1'  # MINUITECAST
COLOR_WN='31' # 気象警報

# 使い方
function usage() {
cat <<_EOT_
使い方:
  ${0##*/} [-c | -d | -h] [-l 言語]

説明:
  現在の天気予報

オプション:
  -c    現在の天気を表示         （Current）
  -d    日中・夜間・明日の天気を表示 （Day）
  -h    ヘルプ
  -l    表示言語
        （ja:日本語、en:English、fr:Français、de:Deutsch、zh-cn:中文 (SIM)など）

_EOT_
exit 1
}

# 引数の設定
while getopts scdnthl: OPT
do
  case $OPT in
    c) FLG_C='true' ;;
    d) FLG_D='true' ;;
    h) usage; exit 1 ;;
    l) LN=$(echo $WEATHER_URL | awk -F'www.accuweather.com' '{print $2}' | awk -F/ '{print $2}')
       WEATHER_URL=${WEATHER_URL/\/$LN\//\/"$OPTARG"\/} ;;
    *) usage; exit 1 ;;
  esac
done

if [ "$FLG_C" != 'true' ] && [ "$FLG_D" != 'true' ]; then
  FLG_C='true'; FLG_D='true'
fi

# データ整理用関数
pickup_data() { echo "$1" | grep -m1 $2 | tr '{|}' '\n' | perl -pe 's/,"/\n/g' | tr -d '"'; }

# 元データ取得
USER_AGENT='Mozilla/5.0 (Macintosh; Intel Mac OS X)'
WEATHER_DATA=$(curl -A "$USER_AGENT" --silent $WEATHER_URL)
WEATHER_HOUR=$(curl -A "$USER_AGENT" --silent ${WEATHER_URL/weather-forecast/hourly-weather-forecast})
DATA_NOW="$(echo "$WEATHER_DATA" | awk '/glacier-ad top content-module/,/connatix/' | tr -d '\t' | ruby -pe 'gsub(/&#[xX]([0-9a-fA-F]+);/) { [$1.to_i(16)].pack("U") }')"
_IFS="$IFS";IFS='^' 
DATA_D=($(echo "$WEATHER_DATA" | grep -A17 'card weather-card' | tr -d '\t' | ruby -pe 'gsub(/&#[xX]([0-9a-fA-F]+);/) { [$1.to_i(16)].pack("U") }' | sed s/--/^/g))
DATA_WN_RAW=($(echo "$WEATHER_HOUR" | grep -A27 'hourly-alerts-container' | tr -d '\t' | ruby -pe 'gsub(/&#[xX]([0-9a-fA-F]+);/) { [$1.to_i(16)].pack("U") }' | sed s/--/^/g))
DATA_WN=$(echo "${DATA_WN_RAW[0]}" | grep -A1 'alert-description' | perl -pe 's/--\n//g')
IFS="$_IFS"
DATA_MC=$(echo "$WEATHER_DATA" | grep -A7 'minutecast-banner' | tr -d '\t')

# 各データ取得
_IFS="$IFS";IFS=$'\n'
TITLE_C=$(echo "$DATA_NOW" | grep -A1 'card__title' | grep -v 'card__title')
TITLE_D=($(echo "${DATA_D[@]}" | grep -A1 'card-header' | grep -v 'card-header' | sed -e 's/<[^>]*>//g' | perl -pe 's/--\n//g'))
TEMP_C=$(echo "$DATA_NOW" | grep -m1 '<div class="temp">' | sed -e 's/<[^>]*>//g')
TEMP_D=($(echo "${DATA_D[@]}" | grep 'class="temp"' | sed -e 's/<[^>]*>//g'))
PHRASE_C=$(echo "$DATA_NOW" | grep '<span class="phrase">' | sed -e 's/<[^>]*>//g')
PHRASE_D=($(echo "${DATA_D[@]}" | grep 'class="phrase"' | sed -e 's/<[^>]*>//g'))
IFS="$_IFS"

# 現在の温度と天気を取得
if [ "$FLG_C" = 'true' ]; then
  COLUMN="$(echo -e -n "\033[${COLOR_CP}m"$(echo "$TITLE_C")"\033[0m:")""@"
  COLUMN="${COLUMN}$(echo -e $(echo $TEMP_C)@"\033[${COLOR_WE}m"$(echo $PHRASE_C)"\033[0m")""\n"
fi
# 日中・夜間・明日の最高気温、天気を取得
if [ "$FLG_D" = 'true' ]; then
  for (( i = 0; i < ${#DATA_D[@]}; ++i ))
  do
    COLUMN="${COLUMN}$(echo -e -n "\033[${COLOR_CP}m""$(echo "${TITLE_D[i]}")""\033[0m: ")""@"
    COLUMN="${COLUMN}$(echo -e $(echo ${TEMP_D[i]})@"\033[${COLOR_WE}m"$(echo ${PHRASE_D[i]})"\033[0m")""\n"
  done
fi

# 地名を表示
PLACE=($(pickup_data "$WEATHER_DATA" 'currentLocation' | grep localizedName | awk -F: '{print $2}'))
echo ${PLACE[2]}, ${PLACE[0]}
# 各データを表として表示
echo -e "$COLUMN" | column -t -s"@"

# MINUTECASTを取得して表示
TITLE_MC=$(echo "$DATA_MC" | grep -A1 'banner-header' | sed -n 2p)
PHRASE_MC=$(echo "$DATA_MC" | grep -A1 'banner-text' | sed -n 2p)
[ -n "$TITLE_MC" ] && echo $(printf "\033[0;${COLOR_CP}m")"$TITLE_MC:$(printf "\033[0m") $PHRASE_MC"

# Warningを表示
[ -n "$DATA_WN" ] && echo "$DATA_WN" | sed -e 's/<[^>]*>//g' | sed -E 's/^/'$(printf "\033[0;${COLOR_WN}m")'/' | sed -E 's/$/'$(printf "\033[0m")'/'